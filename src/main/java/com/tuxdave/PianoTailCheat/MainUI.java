package com.tuxdave.PianoTailCheat;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import java.awt.*;
import java.awt.event.InputEvent;
import java.util.ArrayList;
import java.util.HashMap;

public class MainUI extends JFrame {
    private JPanel panel1;
    private JSpinner corsieSpinner;
    private JComboBox selectedCorsia;
    private JButton registraButton;
    private JTextField xValue;
    private JTextField yValue;
    private JSpinner waitSpinner;
    private JButton startButton;
    private JSpinner bufferSpinner;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(11, 3, new Insets(5, 5, 5, 5), -1, -1));
        final JTextField textField1 = new JTextField();
        textField1.setEditable(false);
        textField1.setText("Sito consigliato: http://tanksw.com/piano-tiles/ - modalità: Arcade");
        panel1.add(textField1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Interire il numero di colonne del pianoforte:");
        panel1.add(label1, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        corsieSpinner = new JSpinner();
        panel1.add(corsieSpinner, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 20), new Dimension(-1, 20), new Dimension(-1, 20), 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Scegli quale punto vuoi configurare: ");
        panel1.add(label2, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        selectedCorsia = new JComboBox();
        panel1.add(selectedCorsia, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("X:");
        panel1.add(label3, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Y:");
        panel1.add(label4, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        xValue = new JTextField();
        xValue.setEditable(false);
        panel1.add(xValue, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        yValue = new JTextField();
        yValue.setEditable(false);
        panel1.add(yValue, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        registraButton = new JButton();
        registraButton.setText("Registra!");
        panel1.add(registraButton, new GridConstraints(4, 2, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel1.add(spacer2, new GridConstraints(6, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 20), new Dimension(-1, 20), new Dimension(-1, 20), 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Costante di attesa:");
        panel1.add(label5, new GridConstraints(7, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        waitSpinner = new JSpinner();
        panel1.add(waitSpinner, new GridConstraints(7, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startButton = new JButton();
        startButton.setText("START");
        panel1.add(startButton, new GridConstraints(10, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel1.add(spacer3, new GridConstraints(9, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 20), new Dimension(-1, 20), new Dimension(-1, 20), 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Buffer:");
        panel1.add(label6, new GridConstraints(8, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bufferSpinner = new JSpinner();
        panel1.add(bufferSpinner, new GridConstraints(8, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private ArrayList<Point> coords = new ArrayList<>();
    private Robot robot;
    private Color background;

    public MainUI() throws AWTException {
        super();
        setContentPane(panel1);
        pack();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
        setVisible(true);

        setup();
    }

    private void setup() throws AWTException {
        robot = new Robot();
        {
            selectedCorsia.addPopupMenuListener(new PopupMenuListener() {
                @Override
                public void popupMenuWillBecomeVisible(PopupMenuEvent popupMenuEvent) {
                }

                @Override
                public void popupMenuWillBecomeInvisible(PopupMenuEvent popupMenuEvent) {
                    loadPoint(coords.get(selectedCorsia.getSelectedIndex()));
                }

                @Override
                public void popupMenuCanceled(PopupMenuEvent popupMenuEvent) {
                }
            });
        }
        {
            SpinnerNumberModel n = new SpinnerNumberModel();
            n.setMinimum(3);
            n.setMaximum(10);
            corsieSpinner.setModel(n);
            corsieSpinner.addChangeListener(changeEvent -> {
                int temp = selectedCorsia.getItemCount();
                selectedCorsia.removeAllItems();
                coords.clear();
                selectedCorsia.removeAllItems();
                for (int i = 0; i < (Integer) corsieSpinner.getValue(); i++) {
                    Point p = new Point();
                    p.x = -1;
                    p.y = -1;
                    coords.add(p);
                    selectedCorsia.addItem(i + 1);
                }
            });
            n.setValue(n.getMinimum());

            n = new SpinnerNumberModel();
            n.setMinimum(35);
            n.setMaximum(500);
            waitSpinner.setModel(n);
            waitSpinner.addChangeListener(changeEvent -> wait = (Integer) waitSpinner.getValue());
            n.setValue(35);

            n = new SpinnerNumberModel();
            n.setMinimum(0);
            n.setMaximum(100);
            bufferSpinner.setModel(n);
            bufferSpinner.addChangeListener(changeEvent -> buffer = (Integer) bufferSpinner.getValue());
            n.setValue(70);
        }
        {
            registraButton.addActionListener(actionEvent -> {
                int n = selectedCorsia.getSelectedIndex();
                JOptionPane.showMessageDialog(null, "Dopo aver cliccato \"OK\" sono " +
                        "disponibili 3 secondi per posizionare il mouse" +
                        "nella posizione della corsia n: " + selectedCorsia.getSelectedItem() + "\nVerrai avvisato" +
                        " quando la registrazione sarà andata a buon fine!");
                try {
                    Thread.sleep(3000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                if (n == 0) {
                    coords.set(selectedCorsia.getSelectedIndex(), MouseInfo.getPointerInfo().getLocation());
                    JOptionPane.showMessageDialog(null, "Registrazione Completata!");
                    loadPoint(coords.get(selectedCorsia.getSelectedIndex()));
                } else {
                    Point p = new Point();
                    p.x = MouseInfo.getPointerInfo().getLocation().x;
                    p.y = coords.get(0).y;
                    coords.set(selectedCorsia.getSelectedIndex(), p);
                    JOptionPane.showMessageDialog(null, "Registrazione Completata!");
                    loadPoint(coords.get(selectedCorsia.getSelectedIndex()));
                }

            });
        }
        {
            startButton.addActionListener(actionEvent -> {
                for (Point p : coords) {
                    if (p.x == -1 || p.y == -1) {
                        JOptionPane.showMessageDialog(null, "Registra tutti i punti per " +
                                "il clic automatico!");
                        return;
                    }
                }

                //calcolo colore sfondo
                HashMap<Color, Integer> map = new HashMap<>();
                for (Point p : coords) {
                    if (!map.containsKey(robot.getPixelColor(p.x, p.y))) {
                        map.put(robot.getPixelColor(p.x, p.y), 0);
                    } else {
                        map.put(robot.getPixelColor(p.x, p.y), map.get(robot.getPixelColor(p.x, p.y)) + 1);
                    }
                }
                int max = -1;
                Color bg = null;
                for (Color key : map.keySet()) {
                    if (map.get(key) > max) {
                        max = map.get(key);
                        bg = key;
                    }
                }
                background = bg;
                start();
            });
        }
    }

    private void loadPoint(Point p) {
        xValue.setText(String.valueOf(p.x));
        yValue.setText(String.valueOf(p.y));
    }

    private int buffer;
    private int wait;
    private int time;

    private void start() {
        final boolean[] movingYet = {true};
        Thread t = new Thread() {
            @Override
            public void run() {
                while (true) {
                    for (Point p : coords) {
                        if (!robot.getPixelColor(p.x, p.y).equals(background) && !robot.getPixelColor(p.x, p.y - buffer).equals(background)) {
                            robot.mouseMove(p.x, p.y - 10);
                            try {
                                sleep(5);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                            if (!robot.getPixelColor(p.x, p.y).equals(background) && !robot.getPixelColor(p.x, p.y - buffer).equals(background)) {
                                System.out.println("Click!");
                                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
                                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);
                            }
                            Point p1 = (Point) p.clone();
                            p1.y -= 10;
                            if (!MouseInfo.getPointerInfo().getLocation().equals(p1)) {
                                movingYet[0] = false;
                                stop();
                            }
                        }
                    }
                    try {
                        sleep(wait);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        };
        t.start();
    }
}
